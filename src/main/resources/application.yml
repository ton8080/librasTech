spring:
  application:
    name: librasTech

  server:
    port: 8085  # Define a porta do servidor (você pode alterar para outro valor se necessário)
    servlet:
      context-path: /api  # Define o contexto da aplicação (opcional)

  datasource:
    url: jdbc:postgresql://localhost:5432/spring_websocket
    username: postgres
    password: 123456
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10  # Define o tamanho máximo do pool de conexões (opcional)

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate.format_sql: true

  webflux:
    cors:
      allowed-origins: "*"  # Permite todas as origens (substitua conforme necessário)
      allowed-methods:
        - GET
        - POST
        - PUT
        - DELETE
      allowed-headers:
        - "*"

  logging:
    level:
      root: INFO  # Define o nível de log da aplicação, pode ser TRACE, DEBUG, INFO, WARN, ERROR
      org:
        springframework: WARN  # Exemplo de configuração de log específica para Spring Framework

  actuator:
    endpoints:
      web:
        exposure:
          include: "*"  # Expõe todos os endpoints do actuator (opcional, dependendo do seu caso de uso)

  # Segurança (caso queira desabilitar a segurança básica)
  security:
    enabled: false

# Configuração do CORS global
web:
  cors:
    mappings:
      "/**":
        allowed-origins: "*"  # Permite todas as origens
        allowed-methods:
          - GET
          - POST
          - PUT
          - DELETE
        allowed-headers:
          - "*"
